"use strict";

/**
 * MIT License
 * Copyright (c) 2022 Kartavya Patel
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Helps to create HTML in JavaScript. Uses JSON to store attributes and elements.
 */
class json2html {
    constructor() {
        this.list = [];
    }

    /**
     * Creates string of attributes from attributes object.
     */
    get_attrs(attrs_obj) {
        let output = "";

        let handle_object = (attrs_object) => {
            let attrs_array = Object.entries(attrs_object);

            for (let index = 0; index < attrs_array.length; index++)
                output += `${attrs_array[index][0]}="${attrs_array[index][1]}" `;
        };

        if (typeof attrs_obj == "object" && attrs_obj.length == undefined) {
            handle_object(attrs_obj);
        } else if (
            typeof attrs_obj == "object" &&
            attrs_obj.length != undefined
        ) {
            for (let index = 0; index < attrs_obj.length; index++) {
                const element = attrs_obj[index];

                if (typeof element == "object" && element.length == undefined)
                    handle_object(element);
                else output += `${element} `;
            }
        }

        return output;
    }

    /**
     * Takes element and appends to root element.
     * @param element Takes object (e.g. this.list)
     * @returns Object itself.
     */
    add(element) {
        this.list.push(element);
        return this;
    }

    /**
     * Converts JSON to HTML.
     * @param input Takes object (e.g. this.list) (Default)
     * @returns HTML string.
     */
    get_html(input = this.list) {
        let output = "";

        if (typeof input == "object" && input.length == undefined) {
            let array = Object.entries(input);
            for (let index = 0; index < array.length; index++) {
                const element = array[index];
                if (element[1].length == 2) {
                    if (typeof element[1][1] == "object") {
                        output += `<${element[0]} ${this.get_attrs(
                            element[1][0]
                        )}>${this.get_html(element[1][1])}</${element[0]}>`;
                    } else
                        output += `<${element[0]} ${this.get_attrs(
                            element[1][0]
                        )}>${element[1][1]}</${element[0]}>`;
                } else
                    output += `<${element[0]} ${this.get_attrs(
                        element[1][0]
                    )}/>`;
            }

            return output;
        }

        for (let index = 0; index < input.length; index++) {
            output += this.get_html(input[index]);
        }

        return output;
    }

    /**
     * Repeats given input.
     * @param what_to_repeat Specify what to repeat.
     * @param how_many_times Specity how many times to repeat.
     * @returns List of given input.
     */
    repeater(what_to_repeat, how_many_times) {
        let output = [];
        for (let index = 0; index < how_many_times; index++) {
            output.push(what_to_repeat);
        }
        return output;
    }

    /**
     * \<div\> tag.
     * @param attributes Object
     * @param innerHTML Object or String
     * @returns \<div\> tag.
     */
    div(attributes = {}, innerHTML = "") {
        return { div: [attributes, innerHTML] };
    }

    /**
     * \<a\> tag
     * @param href String
     * @param innerHTML Object or string
     * @param attributes Object
     * @returns \<a\> tag
     */
    a(href = "#", innerHTML = "", attributes = {}) {
        attributes.href = href;
        return { a: [attributes, innerHTML] };
    }

    /**
     * \<img\> tag
     * @param src String
     * @param alt String
     * @param attributes Object
     * @returns \<img\> tag
     */
    img(src = "", alt = "", attributes = {}) {
        attributes.src = src;
        attributes.alt = alt;
        return { img: [attributes] };
    }

    /**
     * \<input\> tag
     * @param attributes Object
     * @returns \<input\> tag
     */
    input(attributes = {}) {
        return { input: [attributes] };
    }

    /**
     * \<label\> tag
     * @param attributes Object
     * @param innerHTML Object or string
     * @returns \<label\> tag
     */
    label(attributes = {}, innerHTML = "") {
        return { label: [attributes, innerHTML] };
    }

    /**
     * \<iframe\> tag
     * @param src String
     * @param attributes Object
     * @returns \<iframe\> tag
     */
    iframe(src = "", attributes = {}) {
        attributes.src = src;
        return { iframe: [attributes] };
    }
}

var email_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" rx="116" fill="white" />
    <g clip-path="url(#clip0_53_47)">
        <path d="M70.3236 417.56H138.745V251.393L41 178.084V388.236C41 404.462 54.1468 417.56 70.3236 417.56Z"
            fill="#4285F4" />
        <path d="M373.334 417.56H441.756C457.982 417.56 471.08 404.413 471.08 388.236V178.084L373.334 251.393"
            fill="#34A853" />
        <path d="M373.334 124.324V251.393L471.08 178.084V138.985C471.08 102.722 429.685 82.0487 400.703 103.797"
            fill="#FBBC04" />
        <path d="M138.745 251.393V124.324L256.04 212.295L373.334 124.324V251.393L256.04 339.364" fill="#EA4335" />
        <path d="M41 138.985V178.084L138.745 251.393V124.324L111.377 103.797C82.3463 82.0487 41 102.722 41 138.985"
            fill="#C5221F" />
    </g>
    <defs>
        <clipPath id="clip0_53_47">
            <rect width="430.08" height="322.56" fill="white" transform="translate(41 95)" />
        </clipPath>
    </defs>
</svg>`;

var fb_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
                   <rect width="512" height="511.92" rx="116" fill="url(#paint0_linear_48_3)" />
                   <path
                       d="M154.617 311.012H201.762V505.064C201.762 508.896 204.867 512 208.699 512H288.634C292.466 512 295.571 508.896 295.571 505.064V311.926H349.768C353.292 311.926 356.257 309.282 356.659 305.783L364.89 234.342C365.117 232.377 364.494 230.408 363.178 228.934C361.862 227.458 359.978 226.613 358.001 226.613H295.574V181.831C295.574 168.331 302.844 161.485 317.184 161.485C319.227 161.485 358.001 161.485 358.001 161.485C361.833 161.485 364.938 158.38 364.938 154.55V88.9742C364.938 85.1429 361.833 82.0385 358.001 82.0385H301.749C301.352 82.0191 300.471 81.9872 299.173 81.9872C289.413 81.9872 255.487 83.9028 228.688 108.552C198.995 135.868 203.123 168.574 204.109 174.244V226.612H154.617C150.785 226.612 147.68 229.716 147.68 233.547V304.075C147.68 307.906 150.785 311.012 154.617 311.012Z"
                       fill="white" />
                   <defs>
                       <linearGradient id="paint0_linear_48_3" x1="256" y1="0" x2="256" y2="511.92" gradientUnits="userSpaceOnUse">
                           <stop stop-color="#17A9FD" />
                           <stop offset="1" stop-color="#0165E1" />
                       </linearGradient>
                   </defs>
               </svg>`;

var koo_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" rx="116" fill="white" />
    <g clip-path="url(#clip0_55_22)">
        <path
            d="M196.301 133.451L202.752 126.281L218.515 107.657L242.887 94.0362L247.179 86.8659L251.479 74.6841V64.6525L258.65 56.7627L262.95 46.7311H271.551L287.314 54.6125L297.32 71.8143L298.759 91.886L322.403 104.787L336.049 114.819L348.231 130.582L362.563 164.266L368.303 185.768L371.884 211.571L375.465 235.934L387.646 246.711L394.097 265.335L400.548 283.248L402.698 302.583L394.097 319.785L381.915 331.247L366.153 334.117L363.283 347.018L356.113 364.931L341.069 382.853L324.579 397.185L302.399 405.786L277.316 412.236H236.436L206.333 408.647L171.929 397.185L151.866 387.153L137.534 377.079L127.502 369.232L117.462 357.05L110.301 347.018L113.17 331.967L125.352 324.797V314.054L130.364 296.852L140.404 276.78L149.716 260.298L159.028 246.686L168.34 238.085L175.51 233.065V220.883L177.66 206.551L179.811 183.618L184.111 164.266L189.842 146.353L196.301 133.451Z"
            fill="#FACD00" stroke="black" />
        <path
            d="M405.449 288.454V288.023C403.974 273.59 399.449 259.636 392.175 247.084C390.152 243.619 387.832 240.336 385.242 237.272C384.311 236.177 383.164 235.286 381.874 234.652C380.584 234.019 379.177 233.657 377.742 233.59C377.666 232.743 377.581 231.837 377.496 230.965C376.98 225.53 376.404 220.214 375.803 215.05C375.642 213.763 375.498 212.511 375.346 211.215L374.999 208.456C375.014 208.168 374.974 207.881 374.88 207.609C374.813 206.991 374.728 206.382 374.643 205.764C374.621 205.416 374.573 205.071 374.499 204.731C374.423 204.172 374.339 203.622 374.271 203.038C374.203 202.454 374.169 202.335 374.11 201.979C374.051 201.624 373.949 200.904 373.865 200.363C373.78 199.821 373.763 199.677 373.712 199.33C373.619 198.771 373.534 198.212 373.433 197.637C373.414 197.325 373.366 197.016 373.289 196.714C373.179 196.045 373.077 195.385 372.967 194.741C372.947 194.547 372.913 194.355 372.866 194.166C372.722 193.319 372.578 192.473 372.417 191.626L372.29 190.932C372.171 190.331 372.078 189.73 371.96 189.146L371.816 188.299C371.714 187.783 371.613 187.266 371.494 186.767C371.376 186.268 371.367 186.124 371.308 185.793L371.012 184.363C370.936 184.041 370.868 183.728 370.809 183.415C370.749 183.101 370.597 182.424 370.478 181.984C370.36 181.544 370.351 181.391 370.292 181.095L369.92 179.47C369.891 179.231 369.84 178.996 369.767 178.767C369.589 178.014 369.403 177.252 369.217 176.507L369.132 176.143C368.972 175.516 368.836 174.881 368.675 174.272L368.455 173.485C368.345 173.011 368.218 172.537 368.1 172.046L367.871 171.199C367.744 170.75 367.626 170.352 367.515 169.878C367.405 169.404 367.355 169.303 367.27 169.032C367.185 168.761 367.024 168.185 366.914 167.737C366.804 167.288 366.737 167.178 366.669 166.89L366.263 165.536L366.051 164.791C365.882 164.223 365.695 163.648 365.518 163.098C365.532 162.974 365.498 162.85 365.425 162.75C365.204 162.082 365.001 161.421 364.79 160.761L364.578 160.101C364.417 159.661 364.273 159.212 364.129 158.772L363.875 157.993C363.731 157.603 363.604 157.206 363.461 156.808L363.181 156.02C363.096 155.741 362.91 155.259 362.766 154.869L362.495 154.099L362.064 152.931C361.979 152.702 361.877 152.465 361.793 152.219C361.708 151.974 361.463 151.373 361.293 150.916C361.261 150.726 361.192 150.545 361.09 150.382C360.862 149.781 360.616 149.197 360.388 148.605L360.176 148.088L359.66 146.827L359.372 146.158L358.915 145.083C358.813 144.838 358.694 144.609 358.601 144.363L358.153 143.356C358.051 143.119 357.941 142.89 357.839 142.645L357.382 141.655C357.281 141.426 357.179 141.197 357.061 140.969C356.942 140.74 356.73 140.275 356.578 139.919C356.426 139.564 356.392 139.53 356.29 139.335L355.562 137.896C355.511 137.777 355.461 137.667 355.401 137.557L354.724 136.22L354.428 135.652L353.928 134.687L353.581 134.044L353.09 133.197L352.752 132.563C352.591 132.283 352.438 131.995 352.261 131.716L351.922 131.081C351.744 130.793 351.575 130.514 351.414 130.235L351.076 129.642L350.483 128.567C350.483 128.423 350.331 128.296 350.254 128.169C349.967 127.712 349.696 127.255 349.408 126.738L349.112 126.264L348.553 125.418L348.189 124.867L347.672 124.08L347.3 123.521L346.8 122.776L346.411 122.218L345.895 121.49L345.522 120.956C345.336 120.686 345.141 120.432 344.955 120.169C344.769 119.907 344.735 119.873 344.625 119.712L343.778 118.535L343.524 118.188L342.881 117.342L342.492 116.859L341.958 116.182L341.543 115.682L341.027 115.048L340.612 114.548L340.096 113.93L339.681 113.456L339.055 112.83L338.682 112.398L337.979 111.627L337.675 111.297L336.828 110.366L336.439 109.977L335.863 109.376L335.448 108.961L334.906 108.402L334.475 107.97L333.933 107.454L333.501 107.039L332.951 106.506L332.536 106.116L331.91 105.549L331.563 105.236L330.606 104.389L330.259 104.102L329.218 103.196L328.642 102.722L328.193 102.366L327.652 101.918L327.211 101.579L326.644 101.147L326.204 100.8L325.603 100.36L325.197 100.055L324.35 99.4372L323.994 99.1663L323.25 98.6499L322.826 98.3705L322.242 97.9811L321.802 97.6764L321.226 97.3039L320.778 97.0161L320.21 96.6605L319.762 96.3896L319.178 96.0341L318.746 95.7716L318.06 95.3568L317.738 95.1706L316.756 94.6119L316.367 94.4087L315.732 94.0701L315.309 93.833L314.716 93.5198L314.259 93.2912L313.7 93.0034L313.269 92.7579L312.685 92.4786L311.542 91.7929L311.169 91.6235L310.179 91.1833L309.866 91.0394L309.163 90.7347L308.748 90.5654L308.139 90.3029L307.698 90.1336L307.123 89.9051L306.683 89.7357L306.09 89.4987L305.667 89.3463L305.049 89.1178L304.642 88.9739L303.567 88.6098L302.636 88.2966L302.391 88.2289C303.458 82.4559 303.302 76.5231 301.933 70.8142C300.564 65.1052 298.012 59.7472 294.441 55.0866C287.957 46.5195 278.789 41 271.077 41C269.194 40.9549 267.324 41.3157 265.593 42.0577C263.862 42.7998 262.311 43.9057 261.045 45.3005C258.75 47.8108 257.419 51.0529 257.287 54.4516C254.757 54.7885 252.384 55.8685 250.469 57.5548C248.553 59.2411 247.182 61.458 246.527 63.9245C246.008 65.8159 245.91 67.7979 246.239 69.7313C246.568 71.6646 247.317 73.5025 248.432 75.1159C245.333 77.9857 242.557 82.4385 242.252 89.6765C237.734 91.2482 233.344 93.1671 229.122 95.4161C228.148 95.9325 227.192 96.4743 226.261 97.033L223.831 98.4636C223.247 98.8277 222.663 99.2086 222.07 99.598C220.309 100.749 218.565 101.985 216.822 103.323C216.233 103.773 215.668 104.254 215.128 104.762C214.051 105.62 212.984 106.523 211.928 107.471C210.87 108.411 209.524 109.647 208.331 110.806C206.638 112.499 205.021 114.193 203.412 116.038C202.642 116.885 201.88 117.841 201.118 118.772C200.356 119.704 199.941 120.211 199.374 120.999L198.392 122.269C197.461 123.527 196.544 124.822 195.641 126.154C194.735 127.492 193.694 129.151 192.771 130.709C192.085 131.86 191.425 133.02 190.756 134.213C190.265 135.06 189.774 136 189.317 136.922C188.471 138.615 187.556 140.402 186.71 142.239C185.101 145.693 183.6 149.361 182.206 153.244C181.36 155.606 180.513 158.052 179.777 160.6C179.26 162.293 178.752 164.037 178.27 165.815C177.787 167.593 177.381 169.243 176.966 171.004C176.839 171.546 176.704 172.096 176.594 172.697C176.162 174.568 175.747 176.507 175.375 178.429C175.047 180.122 174.737 181.84 174.443 183.584C173.879 187.077 173.363 190.701 172.894 194.454C172.398 198.76 171.997 203.235 171.692 207.88C171.514 210.487 171.37 213.044 171.243 215.499C171.116 217.954 170.998 220.46 170.905 222.872C170.812 225.285 170.727 227.638 170.659 229.949V231.473C168.424 231.473 161.627 231.473 143.426 261.229C132.92 278.448 124.116 296.869 120.493 309.305C119.054 314.02 117.742 320.073 119.155 324.475H119.011L118.3 324.619L117.979 324.687L117.327 324.83L117.022 324.915L116.319 325.101L116.091 325.178C115.786 325.262 115.49 325.364 115.202 325.474H115.058L114.338 325.762L114.068 325.88L113.5 326.134L113.221 326.278L112.662 326.583L112.425 326.71L111.706 327.167C111.46 327.336 111.215 327.514 110.986 327.7L110.791 327.853L110.317 328.267L110.089 328.488L109.437 329.131C109.293 329.3 109.141 329.478 108.997 329.664L108.87 329.834C108.684 330.079 108.497 330.325 108.32 330.579L108.209 330.765C108.083 330.968 107.947 331.18 107.837 331.4C107.789 331.496 107.736 331.589 107.676 331.679C107.566 331.875 107.47 332.079 107.388 332.289C107.346 332.397 107.295 332.502 107.236 332.602L106.804 333.448L106.686 333.753C106.576 334.083 106.457 334.422 106.356 334.786C106.246 335.201 106.161 335.622 106.102 336.047C106.038 336.51 106.004 336.977 106 337.444C106.153 341.837 107.268 346.143 109.268 350.058C110.512 352.765 111.949 355.379 113.568 357.88C114.288 358.972 114.999 360.081 115.845 361.198C121.075 368.265 127.189 374.632 134.038 380.144C136.131 381.871 138.347 383.564 140.683 385.223C144.802 388.166 149.081 390.879 153.5 393.35C168.907 401.951 188.386 409.265 212.267 413.151C216.094 413.777 220.069 414.311 224.195 414.751C233.319 415.721 242.489 416.201 251.665 416.19C262.415 416.242 273.15 415.393 283.758 413.65C287.534 413.007 291.157 412.22 294.653 411.381C317.315 405.777 334.229 395.5 346.758 382.142C347.3 381.575 347.833 380.982 348.35 380.398C349.196 379.45 350.023 378.493 350.83 377.528L352.091 375.97C353.336 374.379 354.521 372.77 355.672 371.111C356.299 370.205 356.917 369.291 357.509 368.36C360.065 364.401 362.361 360.281 364.383 356.026C364.9 354.951 365.408 353.876 365.822 352.775C366.136 352.072 366.432 351.344 366.737 350.667C367.363 349.152 367.981 347.628 368.557 346.079C368.972 344.987 369.403 343.869 369.759 342.693C370.123 341.677 370.461 340.661 370.792 339.628L371.697 336.758C372.171 336.83 372.649 336.864 373.128 336.86C374.281 336.862 375.426 336.667 376.514 336.284C382.393 334.35 387.817 331.24 392.455 327.142C397.638 322.492 401.462 316.524 403.519 309.872C405.603 302.936 406.26 295.651 405.449 288.454ZM265.997 77.901C266.062 77.9038 266.125 77.8827 266.175 77.8418C266.203 77.8225 266.227 77.7974 266.245 77.7682C266.262 77.739 266.273 77.7063 266.277 77.6724C266.301 77.6128 266.301 77.5459 266.277 77.4862C266.263 77.4571 266.243 77.4314 266.218 77.411C266.193 77.3905 266.164 77.3757 266.133 77.3677C259.665 74.354 253.071 71.4419 254.51 66.1763C255.196 63.6367 257.371 62.6208 260.139 62.6208C264.392 62.9401 268.526 64.17 272.262 66.2271C272.305 66.2441 272.354 66.2441 272.397 66.2271C272.451 66.2302 272.505 66.2153 272.55 66.1848C272.593 66.1505 272.627 66.1071 272.651 66.0578C272.668 66.0055 272.668 65.9493 272.651 65.897C272.643 65.8441 272.616 65.7959 272.575 65.7615C267.885 60.9531 262.814 55.8823 267.225 50.8369C267.724 50.332 268.327 49.9424 268.993 49.6952C269.658 49.4481 270.369 49.3494 271.077 49.4062C280.042 49.4062 297.701 64.3817 294.289 86.1549L293.874 86.0702L293.307 85.9517L292.892 85.867L292.3 85.7485L291.258 85.5623H290.928L289.98 85.4099H289.794L289.007 85.2914H288.66L288.042 85.2067H286.696L286.111 85.139H284.791L284.029 85.0628H271.568L269.731 85.1475H269.604L267.911 85.266H267.724L266.15 85.393H265.896L264.364 85.5538H264.186L262.654 85.74H262.544L260.977 85.9348L258.827 86.2564L256.635 86.6374L256.051 86.7559C254.611 87.0099 253.308 87.2977 251.894 87.6024L251.191 87.7802L250.887 87.8479C252.546 79.0185 259.767 78.2481 265.997 77.901ZM132.514 300.204C138.397 286.5 145.408 273.308 153.474 260.764C162.888 246.127 168.382 241.141 170.27 240.108C170.378 240.031 170.498 239.974 170.625 239.939C172.937 240.049 175.933 242.673 178.541 246.846C178.625 246.999 178.727 247.143 178.812 247.287C186.524 260.103 189.478 282.842 181.063 298.698C179.484 301.712 177.561 304.533 175.332 307.104C169.881 313.204 162.976 317.828 155.261 320.547C153.517 321.19 151.874 321.681 150.495 322.054C139.337 324.991 130.177 323.747 126.952 321.952C126.681 321.207 125.733 316.475 132.514 300.204ZM370.233 299.146C369.277 310.288 367.319 321.321 364.383 332.111C363.537 335.048 362.69 337.91 361.717 340.712C357.5 353.239 350.887 364.826 342.246 374.828C332.707 385.416 320.792 393.589 307.478 398.675C291.936 404.77 273.21 407.86 251.775 407.86C241.503 407.891 231.239 407.269 221.046 405.997C217.008 405.481 213.021 404.872 209.118 404.152C194.7 401.576 180.667 397.179 167.358 391.064C149.225 382.599 133.784 370.815 123.871 357.812C114.728 345.833 114.127 338.231 114.465 336.987C115.227 334.295 116.819 332.212 129.458 332.212H136.281C145.669 332.212 152.806 330.934 158.638 328.2C171.418 323.665 182.062 314.553 188.513 302.626C198.672 283.434 194.828 257.581 186.05 242.978C184.19 239.746 181.73 236.898 178.803 234.588C179.006 226.462 179.336 217.734 179.937 208.413C182.477 168.431 193.482 138.15 212.606 118.315C221.746 108.857 233.009 101.712 245.46 97.4732C250.887 95.6132 256.481 94.2781 262.163 93.486C266.577 92.8684 271.029 92.5544 275.487 92.5463C283.674 92.4875 291.821 93.6954 299.639 96.1272C310.087 99.4783 319.629 105.177 327.533 112.787C348.172 132.376 361.446 165.815 367.008 212.189C367.913 219.757 368.828 228.028 369.547 236.739C371.266 256.379 372.138 278.245 370.233 299.146ZM397.399 296.378C397.375 297.922 397.251 299.464 397.026 300.992C396.821 302.439 396.538 303.875 396.18 305.292C395.362 308.646 394.001 311.843 392.15 314.757C391.422 315.893 390.619 316.979 389.746 318.007C389.322 318.512 388.867 318.99 388.383 319.438C387.909 319.87 387.409 320.403 386.952 320.877C386.495 321.351 385.979 321.724 385.513 322.138C384.012 323.325 382.418 324.389 380.747 325.321C379.672 325.922 378.563 326.464 377.462 326.955C376.362 327.446 375.228 327.886 374.076 328.267C374.406 326.921 374.703 325.558 375.007 324.204C375.735 320.784 376.37 317.324 376.912 313.825C377.031 313.038 377.158 312.251 377.259 311.455C377.556 309.449 377.818 307.417 378.063 305.377C378.216 303.946 378.36 302.515 378.504 301.085C378.648 299.654 378.775 298.215 378.876 296.784C379.045 294.634 379.189 292.484 379.325 290.334C379.393 288.895 379.469 287.464 379.52 286.033C379.57 284.603 379.621 283.163 379.655 281.733V266.664C379.655 265.234 379.655 263.803 379.536 262.364C379.418 260.925 379.435 259.502 379.376 258.063C379.316 256.624 379.266 255.202 379.189 253.763C378.995 249.869 378.732 246 378.444 242.174H378.588C378.707 242.259 378.815 242.358 378.91 242.47C379.977 243.723 381.021 245.072 382.042 246.516C382.813 247.6 383.558 248.734 384.303 249.903L385.031 251.105C386.672 253.882 388.148 256.754 389.45 259.706C390.11 261.136 390.736 262.711 391.329 264.26C392.215 266.591 393.016 268.981 393.733 271.43C394.436 273.834 395.071 276.289 395.587 278.753C396.29 282.066 396.815 285.415 397.162 288.784C397.263 289.631 397.331 290.478 397.373 291.324C397.407 293.144 397.441 294.786 397.399 296.378Z"
            fill="#383838" />
        <path
            d="M241.134 443.787C239.282 443.756 237.482 443.166 235.971 442.093C234.46 441.02 233.309 439.516 232.669 437.777L224.203 414.844C220.106 414.392 216.13 413.859 212.276 413.244C216.195 424.13 221.02 437.523 222.383 441.104C222.84 442.297 222.383 443.787 220.174 443.787H207.137C207.137 443.787 203.192 452.481 213.909 452.168C243.539 451.279 240.313 475.025 249.642 470.513C258.616 466.212 241.532 452.143 241.795 452.168C275.902 456.469 265.007 443.753 265.007 443.753C265.007 443.753 247.644 443.787 241.134 443.787Z"
            fill="#383838" />
        <path
            d="M305.133 432.105C304.297 432.116 303.478 431.868 302.788 431.394C302.094 430.929 301.557 430.265 301.248 429.489C299.682 425.561 296.736 417.206 294.653 411.441C291.157 412.287 287.491 413.058 283.758 413.701C286.01 419.923 289.134 428.541 289.396 429.371C290.014 431.275 289.565 431.995 286.196 431.995H273.498C273.498 431.995 269.841 440.164 283.851 440.164C312.431 440.164 306.479 464.189 317.476 458.035C324.494 454.107 311.457 443.034 310.407 441.713C309.806 440.968 310.289 439.919 311.838 440.147C341.035 444.608 333.848 431.995 333.848 431.995C333.848 431.995 313.7 432.105 305.133 432.105Z"
            fill="#383838" />
        <path
            d="M260.664 187.453C261.895 187.163 263.012 186.514 263.874 185.589C264.735 184.664 265.304 183.504 265.506 182.256C265.709 181.008 265.537 179.728 265.012 178.578C264.487 177.428 263.632 176.459 262.557 175.795C261.481 175.13 260.233 174.799 258.969 174.845C257.706 174.89 256.484 175.309 255.459 176.048C254.433 176.788 253.65 177.815 253.208 179C252.767 180.184 252.687 181.473 252.978 182.704C253.17 183.521 253.521 184.292 254.012 184.973C254.502 185.654 255.122 186.231 255.836 186.672C256.55 187.113 257.344 187.409 258.172 187.543C259.001 187.677 259.848 187.646 260.664 187.453V187.453Z"
            fill="#383838" />
        <path
            d="M330.064 186.606C331.139 185.941 331.991 184.971 332.515 183.821C333.038 182.671 333.209 181.392 333.006 180.144C332.802 178.897 332.234 177.738 331.372 176.814C330.51 175.89 329.393 175.242 328.163 174.952C326.933 174.662 325.645 174.744 324.461 175.186C323.277 175.628 322.251 176.411 321.512 177.437C320.774 178.462 320.355 179.683 320.31 180.946C320.266 182.209 320.596 183.457 321.26 184.532C321.702 185.247 322.28 185.867 322.961 186.359C323.643 186.85 324.415 187.202 325.232 187.394C326.05 187.587 326.898 187.616 327.727 187.481C328.556 187.346 329.35 187.049 330.064 186.606V186.606Z"
            fill="#383838" />
        <path
            d="M311.643 203.537L295.457 196.832C294.915 196.632 294.342 196.529 293.764 196.528C293.186 196.531 292.614 196.634 292.071 196.832L275.851 203.537C275.342 203.688 274.887 203.982 274.539 204.384C274.194 204.794 273.979 205.298 273.921 205.831C273.857 206.366 273.951 206.907 274.192 207.389C274.437 207.865 274.813 208.261 275.276 208.532L291.699 219.181C292.292 219.605 293.011 219.816 293.739 219.782C294.462 219.815 295.174 219.604 295.762 219.181L312.21 208.532C312.559 208.332 312.859 208.058 313.091 207.73C313.322 207.402 313.479 207.027 313.55 206.631C313.621 206.236 313.604 205.83 313.502 205.442C313.399 205.053 313.213 204.692 312.955 204.384C312.605 203.986 312.151 203.693 311.643 203.537V203.537Z"
            fill="#383838" />
    </g>
    <defs>
        <clipPath id="clip0_55_22">
            <rect width="299.796" height="430.08" fill="white" transform="translate(106 41)" />
        </clipPath>
    </defs>
</svg>`;

var linkedin_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" rx="116" fill="#0A66C2" />
    <path
        d="M168.275 197.289H102.493C99.5736 197.289 97.208 199.661 97.208 202.586V414.382C97.208 417.308 99.5736 419.679 102.493 419.679H168.275C171.195 419.679 173.561 417.308 173.561 414.382V202.586C173.561 199.661 171.195 197.289 168.275 197.289Z"
        fill="white" />
    <path
        d="M135.408 92C111.473 92 92 111.494 92 135.456C92 159.428 111.473 178.93 135.408 178.93C159.324 178.93 178.781 159.427 178.781 135.456C178.782 111.494 159.324 92 135.408 92Z"
        fill="white" />
    <path
        d="M335.597 192.025C309.177 192.025 289.646 203.408 277.8 216.342V202.586C277.8 199.661 275.434 197.289 272.515 197.289H209.517C206.597 197.289 204.231 199.661 204.231 202.586V414.382C204.231 417.308 206.597 419.679 209.517 419.679H275.155C278.075 419.679 280.44 417.308 280.44 414.382V309.592C280.44 274.28 290.011 260.523 314.572 260.523C341.321 260.523 343.447 282.577 343.447 311.409V414.383C343.447 417.309 345.812 419.68 348.732 419.68H414.395C417.314 419.68 419.68 417.309 419.68 414.383V298.209C419.68 245.702 409.69 192.025 335.597 192.025Z"
        fill="white" />
</svg>`;

var pinterest_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" rx="116" fill="white" />
    <path
        d="M256.354 41C137.414 41 41 137.177 41 255.807C41 346.823 97.7308 424.56 177.851 455.83C175.965 438.824 174.276 412.768 178.588 394.203C182.522 377.412 203.845 287.454 203.845 287.454C203.845 287.454 197.396 274.551 197.396 255.538C197.396 225.737 214.767 203.373 236.342 203.373C254.738 203.373 263.612 217.154 263.612 233.622C263.612 252.062 251.881 279.623 245.791 305.159C240.672 326.537 256.57 343.956 277.678 343.956C315.906 343.956 345.367 303.725 345.367 245.628C345.367 194.359 308.307 158.376 255.402 158.376C194.144 158.376 158.234 204.287 158.234 251.542C158.234 270.053 165.312 289.945 174.204 300.661C175.983 302.811 176.216 304.693 175.731 306.843C174.114 313.563 170.468 328.329 169.731 331.268C168.779 335.3 166.641 336.124 162.528 334.225C135.671 321.86 118.821 282.651 118.821 250.969C118.821 183.303 168.186 121.013 261.097 121.013C335.792 121.013 393.888 174.181 393.888 245.073C393.888 319.172 347.055 378.792 281.917 378.792C260.109 378.792 239.63 367.52 232.372 354.08L218.917 405.116C214.085 423.843 200.881 447.264 192.007 461.493C212.18 467.675 233.432 471.08 255.779 471.08C374.469 471.08 471.08 374.939 471.08 256.273C471.08 137.589 374.469 41.4659 255.779 41.4659L256.354 41Z"
        fill="#E60123" />
</svg>`;

var reddit_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" rx="116" fill="white" />
    <path
        d="M256.04 41C199.008 41 144.312 63.6559 103.984 103.984C63.6559 144.312 41 199.008 41 256.04C41 313.072 63.6559 367.768 103.984 408.096C144.312 448.424 199.008 471.08 256.04 471.08C313.072 471.08 367.768 448.424 408.096 408.096C448.424 367.768 471.08 313.072 471.08 256.04C471.08 199.008 448.424 144.312 408.096 103.984C367.768 63.6559 313.072 41 256.04 41V41ZM345.819 126.012C358.148 126.012 368.219 136.066 368.219 148.395C368.157 154.207 365.838 159.767 361.752 163.901C357.666 168.035 352.133 170.418 346.323 170.549C340.512 170.679 334.878 168.545 330.611 164.599C326.344 160.652 323.778 155.201 323.455 149.398L276.917 139.596L262.581 206.742C295.267 207.996 324.942 218.068 346.339 233.407C351.858 227.87 359.42 224.608 367.968 224.608C385.315 224.608 399.4 238.693 399.4 256.04C399.4 268.871 391.605 279.927 381.301 284.963C381.812 288.042 382.064 291.16 382.053 294.281C382.053 342.558 325.964 381.552 256.542 381.552C187.12 381.552 131.03 342.558 131.03 294.281C131.03 291.002 131.299 287.723 131.801 284.712C126.253 282.25 121.54 278.23 118.235 273.14C114.929 268.05 113.174 262.109 113.182 256.04C113.182 238.693 127.267 224.608 144.613 224.608C152.91 224.608 160.706 228.121 166.243 233.389C187.872 217.566 217.817 207.764 251.255 206.742L267.115 131.801C267.493 130.358 268.385 129.103 269.623 128.27C270.911 127.521 272.422 127.254 273.888 127.518L325.964 138.574C327.724 134.8 330.53 131.609 334.05 129.382C337.569 127.156 341.654 125.986 345.819 126.012V126.012ZM206.76 256.04C194.413 256.04 184.36 266.111 184.36 278.44C184.36 290.751 194.413 300.804 206.76 300.804C219.071 300.804 229.124 290.751 229.124 278.422C229.124 266.093 219.071 256.04 206.742 256.04H206.76ZM305.32 256.04C293.009 256.04 282.956 266.093 282.956 278.44C282.956 290.751 293.009 300.804 305.338 300.804C317.667 300.804 327.72 290.751 327.72 278.422C327.72 266.111 317.649 256.04 305.32 256.04V256.04ZM207.369 327.541C205.821 327.533 204.333 328.139 203.23 329.225C202.141 330.331 201.531 331.822 201.531 333.374C201.531 334.926 202.141 336.416 203.23 337.522C218.318 352.611 247.743 353.883 256.291 353.883C264.839 353.883 294.012 352.88 309.352 337.522C310.4 336.421 311.026 334.985 311.121 333.468C311.216 331.951 310.774 330.449 309.872 329.225C308.765 328.131 307.271 327.517 305.714 327.517C304.158 327.517 302.664 328.131 301.557 329.225C291.755 338.777 271.38 342.307 256.542 342.307C241.704 342.307 221.078 338.795 211.527 329.225C210.98 328.681 210.332 328.251 209.618 327.958C208.905 327.666 208.14 327.518 207.369 327.523V327.541Z"
        fill="url(#paint0_linear_51_23)" />
    <defs>
        <linearGradient id="paint0_linear_51_23" x1="256.04" y1="41" x2="256.04" y2="471.08"
            gradientUnits="userSpaceOnUse">
            <stop stop-color="#EF8537" />
            <stop offset="1" stop-color="#DA3231" />
        </linearGradient>
    </defs>
</svg>`;

var snapchat_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" rx="116" fill="#FFFC00" />
    <path fill-rule="evenodd" clip-rule="evenodd"
        d="M135.962 363.154C111.154 359.164 96.4566 353.313 92.8298 344.685C92.361 343.563 92.0853 342.37 92.0142 341.157C91.7691 336.919 94.7286 333.152 98.9068 332.455C117.813 329.282 133.654 318.73 146.576 303.244C154.569 293.665 159.885 284.266 162.586 277.818L162.778 277.387C164.992 272.831 165.386 269.238 164.269 266.543C163.019 263.527 159.595 260.977 154.074 258.722C152.109 257.92 150.566 257.388 147.02 256.239C146.141 255.947 146.141 255.947 145.156 255.624C144.503 255.411 143.853 255.186 143.208 254.952C142.714 254.768 142.714 254.768 142.242 254.581C130.219 249.739 123.61 243.129 125.078 235.201C126.415 227.982 134.566 222.931 142.267 222.932C144.275 222.891 146.266 223.296 148.32 224.225C152.743 226.515 157.615 227.806 162.591 228.008C164.191 228.057 165.779 227.76 167.181 227.179C167.14 226.442 167.122 226.135 167.051 224.935L166.92 222.783L166.757 220.112L166.604 217.603C166.092 209.233 165.817 203.881 165.649 198.254C165.038 177.715 166.413 163.031 170.972 152.624C188.124 113.465 220.238 99 252.57 99H258.948C291.486 99 323.566 113.403 340.734 152.607C346.844 166.534 347.227 183.386 344.936 220.133L344.684 224.365V224.369L344.516 227.184C345.731 227.687 347.014 227.962 348.25 227.991L348.165 228.005C352.842 227.623 357.402 226.319 361.821 224.053C363.986 223.092 366.332 222.618 368.6 222.665C370.846 222.662 373.077 223.042 375.262 223.814L375.582 223.932L375.882 224.043C382.297 226.385 386.633 231.215 386.746 237.01C386.876 244.258 380.544 250.059 369.444 254.518C368.241 255.005 366.907 255.451 363.419 256.322L364.598 256.106C361.213 257.203 359.572 257.771 357.596 258.582C352.079 260.846 348.642 263.405 347.392 266.401C346.282 269.07 346.681 272.693 348.877 277.238L349.105 277.719C351.766 284.088 357.111 293.536 365.11 303.116C378.03 318.59 393.868 329.132 412.752 332.304C416.951 332.99 419.923 336.773 419.664 341.01C419.594 342.234 419.311 343.437 418.828 344.565C415.203 353.153 400.503 358.986 375.718 362.974C375.282 363.987 374.723 366.035 373.936 369.679C373.21 373.106 372.72 375.159 372.143 377.036C371.245 381.468 367.21 384.553 363.071 384.203L362.542 384.2C360.003 384.114 357.477 383.795 354.997 383.247C349.434 382.061 343.765 381.449 338.077 381.422C334.01 381.433 329.95 381.783 325.921 382.471C320.817 383.322 315.91 385.693 309.324 390.172C307.688 391.283 306.447 392.165 303.355 394.389C285.261 407.721 274.909 412.637 257.874 412.637H253.834C236.866 412.637 226.889 407.933 208.364 394.596C205.254 392.359 203.934 391.423 202.269 390.294C195.748 385.872 190.852 383.512 185.755 382.646C181.76 381.963 177.714 381.613 173.661 381.599C167.983 381.659 162.326 382.308 156.782 383.535C154.298 384.125 151.769 384.494 149.469 384.619C144.81 385.144 140.537 382.024 139.62 377.723C138.987 375.525 138.736 374.464 137.744 370.028C136.913 366.151 136.362 364.095 135.962 363.154V363.154Z"
        stroke="black" stroke-width="13.875" />
    <path fill-rule="evenodd" clip-rule="evenodd"
        d="M257.874 408.199H253.834C234.858 408.199 222.71 399.456 210.956 390.994C202.935 385.223 195.38 379.779 186.502 378.27C182.244 377.544 177.933 377.173 173.613 377.161C167.608 377.225 161.625 377.914 155.756 379.217C153.528 379.746 151.257 380.078 148.971 380.209C146.592 380.477 144.399 378.875 143.885 376.495C143.144 373.921 142.607 371.435 142.083 369.098C141.037 364.216 140.325 361.479 139.294 360.059L138.582 359.082L137.405 358.89C113.721 355.147 99.7288 349.643 96.9241 342.972C96.6487 342.313 96.4865 341.613 96.4443 340.9C96.3292 338.91 97.7097 337.154 99.6411 336.832C145.382 329.154 165.811 281.605 166.654 279.594L166.77 279.327C169.502 273.705 170.025 268.837 168.368 264.843C165.302 257.446 155.146 254.206 148.434 252.032C146.98 251.543 145.207 250.995 143.9 250.463C133.612 246.321 128.484 241.187 129.443 236.009C130.402 230.831 137.013 227.369 142.359 227.369C143.71 227.342 145.05 227.615 146.283 228.169C151.295 230.761 156.816 232.221 162.455 232.444C165.137 232.525 167.794 231.914 170.17 230.669L171.768 229.767L171.667 227.902C171.521 225.224 171.347 222.488 171.187 219.84C169.822 197.648 168.121 170.19 175.038 154.405C195.728 107.167 239.623 103.439 252.569 103.439H258.948C272.025 103.439 315.964 107.108 336.669 154.389C343.601 170.19 341.886 197.737 340.505 219.869C340.505 219.869 340.128 226.215 340.026 227.917L339.925 229.781L341.537 230.683C343.609 231.777 345.907 232.375 348.25 232.429H348.526C353.794 231.997 358.924 230.529 363.623 228.109C365.19 227.412 366.892 227.069 368.606 227.103C370.349 227.101 372.078 227.396 373.721 227.976L374.041 228.094L374.361 228.213C379.185 229.973 382.236 233.347 382.309 237.089C382.396 241.942 377.354 246.557 367.779 250.404C366.572 250.892 365.047 251.381 363.419 251.883H363.231C356.518 254.059 346.361 257.342 343.295 264.695C341.638 268.675 342.176 273.572 344.893 279.194L345.01 279.43C345.882 281.516 366.311 329.006 412.036 336.684C413.972 337 415.355 338.761 415.233 340.753C415.192 341.472 415.024 342.177 414.739 342.838C411.935 349.481 397.928 354.969 374.259 358.713L373.081 358.904L372.37 359.881C371.338 361.36 370.597 364.113 369.595 368.758C369.043 371.362 368.519 373.714 367.793 376.155C367.338 378.398 365.314 379.946 363.071 379.765H362.693C360.415 379.687 358.148 379.4 355.922 378.907C350.051 377.656 344.067 377.011 338.064 376.983C333.751 376.996 329.445 377.367 325.191 378.093C316.313 379.572 308.743 385.046 300.722 390.816C288.997 399.456 276.835 408.199 257.874 408.199V408.199Z"
        fill="white" />
    <path fill-rule="evenodd" clip-rule="evenodd"
        d="M412.545 333.844C368.418 326.446 348.613 280.318 347.727 278.365L347.582 278.04C345.227 273.172 344.675 269.163 346.027 265.938C348.569 259.843 357.956 256.795 364.175 254.783C365.904 254.221 367.546 253.703 368.883 253.156C379.882 248.718 385.403 243.303 385.287 237.015C385.2 232.074 381.408 227.651 375.406 225.476C373.257 224.6 370.957 224.153 368.636 224.159C366.494 224.132 364.372 224.571 362.417 225.446C358.063 227.698 353.308 229.07 348.424 229.485C346.526 229.454 344.661 228.983 342.976 228.11C343.107 225.831 343.252 223.493 343.397 221.038V220.091C344.85 197.633 346.521 169.687 339.314 153.221C317.911 104.282 272.432 100.48 258.992 100.48H252.569C239.188 100.48 193.796 104.341 172.379 153.221C165.114 169.672 166.901 197.604 168.281 220.046C168.441 222.68 168.615 225.417 168.761 228.08C166.81 229.083 164.633 229.567 162.44 229.485C157.224 229.234 152.126 227.845 147.503 225.416C145.889 224.684 144.132 224.32 142.36 224.352C135.734 224.352 127.83 228.79 126.58 235.403C125.694 240.166 127.786 247.105 142.825 253.156C144.176 253.703 145.804 254.221 147.532 254.783C153.736 256.795 163.138 259.828 165.681 265.938C167.002 269.104 166.465 273.187 164.111 278.04L163.966 278.365C163.138 280.333 143.261 326.446 99.1473 333.844C95.7553 334.419 93.3358 337.508 93.5386 341.004C93.5992 342.062 93.84 343.103 94.2506 344.081C97.5639 351.966 111.527 357.736 136.969 361.76C137.827 362.929 138.698 367.072 139.25 369.586C139.802 372.101 140.325 374.631 141.11 377.338C141.97 380.991 145.307 383.467 148.986 383.182C151.434 383.053 153.866 382.701 156.251 382.132C161.957 380.85 167.78 380.166 173.628 380.09C177.787 380.101 181.936 380.457 186.037 381.155C194.247 382.546 201.221 387.561 209.285 393.375C220.909 401.705 233.986 411.128 253.848 411.128H257.874C277.779 411.128 290.871 401.705 302.422 393.375C310.515 387.546 317.49 382.532 325.671 381.156C329.77 380.457 333.921 380.101 338.079 380.09C343.894 380.121 349.693 380.751 355.384 381.969C357.772 382.497 360.204 382.804 362.649 382.886H363.027C366.568 383.101 369.744 380.681 370.539 377.16C371.294 374.543 371.847 372.027 372.399 369.497C372.951 366.968 373.852 362.87 374.665 361.701C400.078 357.677 414.056 351.922 417.369 344.081C417.788 343.1 418.034 342.054 418.095 340.989C418.295 337.518 415.908 334.446 412.545 333.843V333.844ZM411.253 341.373C410.438 343.297 405.324 349.969 373.474 354.969C368.491 355.754 367.27 361.435 365.861 368.048C365.352 370.415 364.829 372.797 364.117 375.267C363.899 376.007 363.87 376.051 363.071 376.051H362.693C360.659 375.962 358.636 375.695 356.648 375.253C350.538 373.953 344.311 373.283 338.064 373.255C333.536 373.265 329.016 373.651 324.551 374.409C314.816 376.066 306.897 381.806 298.499 387.798C287.239 395.905 275.586 404.278 257.815 404.278H253.791C236.034 404.278 224.381 395.905 213.106 387.798C204.723 381.762 196.789 376.051 187.054 374.409C182.589 373.651 178.07 373.265 173.541 373.255C167.286 373.319 161.055 374.033 154.942 375.386C152.956 375.858 150.935 376.164 148.898 376.302C147.75 376.302 147.721 376.302 147.445 375.386C146.733 372.915 146.21 370.474 145.702 368.107C144.248 361.494 143.057 355.783 138.088 354.999C106.267 349.999 101.152 343.311 100.31 341.389C100.203 341.14 100.139 340.875 100.121 340.604C147.59 332.645 168.688 284.253 170.025 281.058C173.279 274.326 173.861 268.335 171.74 263.305C167.976 254.295 156.817 250.685 149.421 248.289C147.736 247.741 146.268 247.268 145.15 246.809C135.676 242.919 132.77 239.028 133.22 236.675C133.729 233.968 138.349 231.201 142.389 231.201C143.176 231.175 143.96 231.322 144.685 231.63C150.195 234.487 156.267 236.094 162.47 236.335C170.722 236.335 174.398 232.429 174.791 231.985L175.691 230.964L175.619 229.604C175.444 226.423 175.242 223.079 175.023 219.632C173.686 197.914 172.001 170.915 178.54 156.017C198.3 110.835 240.205 107.388 252.584 107.388H258.992C271.226 107.388 313.335 110.732 333.182 156.032C339.72 170.944 338.05 197.974 336.699 219.647C336.484 222.97 336.29 226.293 336.117 229.618V230.994L337.018 232.015C337.382 232.429 340.782 236.039 348.337 236.335H348.584C354.398 235.897 360.065 234.297 365.25 231.63C366.31 231.179 367.455 230.962 368.606 230.994C370.059 230.984 371.5 231.26 372.849 231.808L373.038 231.882C376.235 233.02 378.501 235.181 378.545 237.134C378.545 238.243 377.746 242.208 366.398 246.78C365.294 247.223 363.826 247.697 362.14 248.259C354.745 250.641 343.586 254.25 339.823 263.275C337.701 268.365 338.282 274.356 341.537 281.028C342.874 284.209 363.971 332.601 411.456 340.575C411.439 340.857 411.37 341.133 411.252 341.388V341.373H411.253Z"
        fill="#030303" />
</svg>`;

var tg_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" rx="116" fill="white" />
    <path
        d="M256 456C366.457 456 456 366.457 456 256C456 145.543 366.457 56 256 56C145.543 56 56 145.543 56 256C56 366.457 145.543 456 256 456Z"
        fill="url(#paint0_linear_59_11)" />
    <path
        d="M191.382 270.62L215.11 336.297C215.11 336.297 218.077 342.442 221.254 342.442C224.43 342.442 271.679 293.288 271.679 293.288L324.22 191.805L192.229 253.667L191.382 270.62Z"
        fill="#C8DAEA" />
    <path
        d="M222.843 287.463L218.288 335.873C218.288 335.873 216.382 350.707 231.212 335.873C246.042 321.04 260.237 309.602 260.237 309.602"
        fill="#A9C6D8" />
    <path
        d="M191.81 272.963L143 257.06C143 257.06 137.167 254.693 139.045 249.327C139.432 248.22 140.212 247.278 142.545 245.66C153.36 238.122 342.722 170.06 342.722 170.06C342.722 170.06 348.068 168.258 351.222 169.457C352.002 169.698 352.704 170.143 353.256 170.744C353.808 171.346 354.19 172.084 354.363 172.882C354.704 174.291 354.847 175.741 354.787 177.19C354.772 178.443 354.62 179.605 354.505 181.427C353.352 200.035 318.838 338.915 318.838 338.915C318.838 338.915 316.773 347.042 309.375 347.32C307.557 347.379 305.746 347.071 304.049 346.414C302.352 345.758 300.805 344.767 299.5 343.5C284.982 331.012 234.802 297.288 223.713 289.872C223.463 289.701 223.253 289.479 223.096 289.22C222.939 288.962 222.839 288.672 222.803 288.372C222.648 287.59 223.498 286.622 223.498 286.622C223.498 286.622 310.875 208.955 313.2 200.802C313.38 200.17 312.7 199.858 311.787 200.135C305.983 202.27 205.38 265.802 194.277 272.813C193.477 273.055 192.633 273.107 191.81 272.963V272.963Z"
        fill="white" />
    <defs>
        <linearGradient id="paint0_linear_59_11" x1="256" y1="456" x2="256" y2="56" gradientUnits="userSpaceOnUse">
            <stop stop-color="#1D93D2" />
            <stop offset="1" stop-color="#38B0E3" />
        </linearGradient>
    </defs>
</svg>`;

var twitter_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" rx="116" fill="#1D9BF0" />
    <path
        d="M386.133 189.004C386.333 191.893 386.333 194.782 386.333 197.697C386.333 286.528 318.707 388.978 195.05 388.978V388.924C158.521 388.978 122.751 378.514 92 358.786C97.3116 359.425 102.65 359.744 108.001 359.758C138.273 359.784 167.68 349.627 191.495 330.924C162.728 330.378 137.501 311.621 128.688 284.238C138.766 286.182 149.149 285.783 159.04 283.08C127.677 276.744 105.113 249.188 105.113 217.186C105.113 216.893 105.113 216.613 105.113 216.334C114.458 221.539 124.921 224.427 135.624 224.747C106.084 205.005 96.9788 165.708 114.817 134.984C148.95 176.983 199.31 202.516 253.371 205.218C247.953 181.869 255.354 157.401 272.82 140.988C299.897 115.535 342.482 116.84 367.935 143.903C382.992 140.934 397.422 135.41 410.628 127.582C405.609 143.144 395.106 156.363 381.075 164.763C394.4 163.192 407.419 159.624 419.68 154.18C410.654 167.705 399.286 179.486 386.133 189.004Z"
        fill="white" />
</svg>`;

var whatsapp_icon = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" rx="116" fill="url(#paint0_linear_48_8)" />
    <path
        d="M342.198 282.941C341.499 282.606 315.371 269.74 310.728 268.069C308.833 267.388 306.802 266.724 304.642 266.724C301.114 266.724 298.15 268.482 295.842 271.936C293.232 275.815 285.331 285.051 282.889 287.81C282.57 288.174 282.135 288.61 281.875 288.61C281.641 288.61 277.597 286.944 276.373 286.413C248.344 274.237 227.07 244.959 224.152 240.022C223.736 239.312 223.718 238.99 223.715 238.99C223.817 238.614 224.76 237.669 225.246 237.181C226.669 235.773 228.211 233.917 229.703 232.122C230.409 231.271 231.117 230.42 231.811 229.617C233.976 227.099 234.939 225.144 236.056 222.879L236.642 221.703C239.369 216.284 237.04 211.711 236.287 210.234C235.669 208.998 224.636 182.372 223.464 179.574C220.643 172.824 216.916 169.681 211.736 169.681C211.256 169.681 211.736 169.681 209.721 169.766C207.267 169.87 193.902 171.629 187.994 175.354C181.727 179.305 171.127 191.897 171.127 214.044C171.127 233.976 183.775 252.795 189.206 259.953C189.341 260.133 189.589 260.5 189.948 261.026C210.746 291.399 236.673 313.908 262.956 324.408C288.259 334.515 300.241 335.683 307.053 335.683C307.055 335.683 307.055 335.683 307.055 335.683C309.917 335.683 312.208 335.459 314.23 335.26L315.512 335.138C324.253 334.363 343.462 324.409 347.832 312.266C351.274 302.702 352.182 292.253 349.892 288.461C348.323 285.882 345.62 284.585 342.198 282.941Z"
        fill="white" />
    <path
        d="M259.381 77C162.316 77 83.3465 155.376 83.3465 251.712C83.3465 282.871 91.6851 313.371 107.481 340.064L77.2467 429.251C76.6835 430.914 77.1024 432.753 78.3323 434.005C79.2202 434.911 80.4246 435.4 81.6545 435.4C82.1258 435.4 82.6006 435.329 83.0637 435.181L176.062 405.629C201.51 419.227 230.273 426.404 259.383 426.404C356.439 426.405 435.4 348.038 435.4 251.712C435.4 155.376 356.439 77 259.381 77ZM259.381 390.011C231.991 390.011 205.461 382.102 182.656 367.138C181.889 366.634 180.999 366.375 180.103 366.375C179.629 366.375 179.155 366.448 178.693 366.594L132.106 381.403L147.145 337.034C147.632 335.598 147.388 334.015 146.492 332.791C129.126 309.062 119.946 281.026 119.946 251.712C119.946 175.444 182.497 113.394 259.38 113.394C336.255 113.394 398.798 175.444 398.798 251.712C398.799 327.971 336.257 390.011 259.381 390.011Z"
        fill="white" />
    <defs>
        <linearGradient id="paint0_linear_48_8" x1="256" y1="113.5" x2="256" y2="390" gradientUnits="userSpaceOnUse">
            <stop stop-color="#5EEC6B" />
            <stop offset="1" stop-color="#28D146" />
        </linearGradient>
    </defs>
</svg>`;

var openArrow = `<svg viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <line x1="16" y1="-16" x2="166.434" y2="-16" transform="matrix(0.707107 0.707107 0.707107 -0.707107 223 127)"
        stroke="#838287" stroke-width="32" stroke-linecap="round" />
    <line x1="16" y1="-16" x2="165.728" y2="-16" transform="matrix(-0.709853 0.70435 0.70435 0.709853 352 256)"
        stroke="#838287" stroke-width="32" stroke-linecap="round" />
</svg>`;

let applist = {
    wa: {
        id: "wa",
        name: "WhatsApp",
        theme: { bg: "#25D366", fg: "#fff" },
        svg: whatsapp_icon,
        description:
            "WhatsApp is an internationally available freeware, cross-platform centralized instant messaging (IM) and voice-over-IP (VoIP) service owned by American company Meta Platforms (formerly Facebook).",
    },
    fb: {
        id: "fb",
        name: "Facebook",
        theme: { bg: "#0c87ef", fg: "#fff" },
        svg: fb_icon,
        description:
            "Facebook is an online social media and social networking service owned by American company Meta Platforms.",
    },
    tw: {
        id: "tw",
        name: "Twitter",
        theme: { bg: "#1D9BF0", fg: "#fff" },
        svg: twitter_icon,
        description:
            'Twitter is a microblogging and social networking service owned by American company Twitter, Inc., on which users post and interact with messages known as "tweets".',
    },
    email: {
        id: "email",
        name: "Email",
        theme: { bg: "#EA4335", fg: "#fff" },
        svg: email_icon,
        description:
            'Email is a method of exchanging messages ("mail") between people using electronic devices. E.g. Gmail',
    },
    lnkdn: {
        id: "lnkdn",
        name: "LinkedIn",
        theme: { bg: "#0A66C2", fg: "#fff" },
        svg: linkedin_icon,
        description:
            "LinkedIn is an American business and employment-oriented online service that operates via websites and mobile apps.",
    },
    pntrst: {
        id: "pntrst",
        name: "Pinterest",
        theme: { bg: "#E60123", fg: "#fff" },
        svg: pinterest_icon,
        description:
            'Pinterest is an image sharing and social media service designed to enable saving and discovery of information (specifically "ideas") on the internet using images, and on a smaller scale, animated GIFs and videos, in the form of pinboards.',
    },
    rdt: {
        id: "rdt",
        name: "Reddit",
        theme: { bg: "#e45b34", fg: "#fff" },
        svg: reddit_icon,
        description:
            "Reddit is an American social news aggregation, content rating, and discussion website.",
    },
    snpcht: {
        id: "snpcht",
        name: "Snapchat",
        theme: { bg: "#FFFC00", fg: "#000" },
        svg: snapchat_icon,
        description:
            "Snapchat is an American multimedia instant messaging app and service developed by Snap Inc., originally Snapchat Inc.",
    },
    koo: {
        id: "koo",
        name: "Koo",
        theme: { bg: "#FACD00", fg: "#383838" },
        svg: koo_icon,
        description:
            "Koo is an Indian microblogging and social networking service, based in Bengaluru, India.",
    },
    tg: {
        id: "tg",
        name: "Telegram",
        theme: { bg: "#2aa1da", fg: "#fff" },
        svg: tg_icon,
        description:
            "Telegram is an globally accessible freemium, cross-platform, encrypted, cloud-based and centralized instant messaging (IM) service.",
    },
};

function get_applist_html() {
    let app_list_obj = new json2html(),
        appids = Object.keys(applist);
    for (let index = 0; index < appids.length; index++) {
        let appid = appids[index];
        app_list_obj.add(
            app_list_obj.div(
                {
                    class: "applist-item",
                    id: `open-${applist[appid].id}-btn`,
                },
                [
                    app_list_obj.div({ class: "icon-n-name" }, [
                        app_list_obj.div(
                            { class: "app-icon" },
                            applist[appid].svg
                        ),
                        app_list_obj.div(
                            { class: "app-name" },
                            applist[appid].name
                        ),
                    ]),
                    app_list_obj.div({ class: "open-arrow" }, openArrow),
                ]
            )
        );
    }
    return app_list_obj.list;
}

var backButton = `<svg class="close-btn" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg">
                      <path d="M29.2663 36.7252L17.3067 24.7655C17.1931 24.652 17.1136 24.5384 17.0681 24.4248C17.0227 24.3112 17 24.1863 17 24.05C17 23.9137 17.0227 23.7888 17.0681 23.6752C17.1136 23.5616 17.1931 23.448 17.3067 23.3345L29.2663 11.3748C29.5162 11.1249 29.8342 11 30.2204 11C30.6065 11 30.9245 11.1249 31.1744 11.3748C31.447 11.6474 31.5833 11.9711 31.5833 12.3459C31.5833 12.7207 31.447 13.0444 31.1744 13.317L20.4414 24.05L31.1744 34.783C31.4697 35.0783 31.606 35.4077 31.5833 35.7711C31.5606 36.1346 31.4243 36.4413 31.1744 36.6911C30.9018 36.9637 30.5781 37.1 30.2033 37.1C29.8285 37.1 29.5162 36.9751 29.2663 36.7252V36.7252Z"/>
                  </svg>`;

var closeButton = `<svg class="close-btn" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg">
                       <path d="M24 26.1L13.5 36.5999C13.2 36.8999 12.85 37.0499 12.45 37.0499C12.05 37.0499 11.7 36.8999 11.4 36.5999C11.1 36.2999 10.95 35.9499 10.95 35.5499C10.95 35.1499 11.1 34.8 11.4 34.5L21.9 24L11.4 13.5C11.1 13.2 10.95 12.85 10.95 12.45C10.95 12.05 11.1 11.7 11.4 11.4C11.7 11.1 12.05 10.95 12.45 10.95C12.85 10.95 13.2 11.1 13.5 11.4L24 21.9L34.5 11.4C34.8 11.1 35.15 10.95 35.55 10.95C35.95 10.95 36.3 11.1 36.6 11.4C36.9 11.7 37.05 12.05 37.05 12.45C37.05 12.85 36.9 13.2 36.6 13.5L26.1 24L36.6 34.5C36.9 34.8 37.05 35.1499 37.05 35.5499C37.05 35.9499 36.9 36.2999 36.6 36.5999C36.3 36.8999 35.95 37.0499 35.55 37.0499C35.15 37.0499 34.8 36.8999 34.5 36.5999L24 26.1Z"/>
                   </svg>`;

function get_sharer_content(sharer_content) {
    let sharerContent = new json2html();

    sharerContent.add(
        sharerContent.div({ class: "sharer-content" }, [
            sharerContent.div({ class: "space" }),
            sharerContent.div({ class: "sharer-content-main" }, sharer_content),
            sharerContent.div({ class: "space" }),
        ])
    );

    return sharerContent.list;
}

function get_sharer_header(nav_btn) {
    let sharer_header = new json2html();
    sharer_header.add(
        sharer_header.div(
            { id: "sharer-header" },
            sharer_header.div(
                { class: "sharer-header-container" },
                sharer_header.div({ id: "back-btn" }, nav_btn)
            )
        )
    );

    return sharer_header.list;
}

function get_sharing_URL(appid) {
    let input_url = sessionStorage.getItem("temp-sharer-url"),
        title = sessionStorage.getItem("temp-sharer-title"),
        output_url = "";

    if (appid == applist.wa.id) {
        if (title != "") title += "\n";
        output_url = `http://api.whatsapp.com/send?text=${encodeURIComponent(
            `${title}${input_url}`
        )}`;
    } else if (appid == applist.fb.id) {
        output_url = `https://www.facebook.com/sharer/sharer.php?t=${encodeURIComponent(
            title
        )}&u=${encodeURIComponent(input_url)}`;
    } else if (appid == applist.email.id) {
        output_url = `mailto:?subject=${encodeURIComponent(
            title
        )}&body=${encodeURIComponent(input_url)}`;
    } else if (appid == applist.lnkdn.id) {
        if (title != "") title += "\n";
        output_url = `https://www.linkedin.com/cws/share?url=${encodeURIComponent(
            `${title}${input_url}`
        )}`;
    } else if (appid == applist.tw.id) {
        output_url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(
            title
        )}&url=${encodeURIComponent(input_url)}`;
    } else if (appid == applist.snpcht.id) {
        output_url = `https://snapchat.com/scan?attachmentUrl=${encodeURIComponent(
            input_url
        )}`;
    } else if (appid == applist.rdt.id) {
        output_url = `https://reddit.com/submit?title=${encodeURIComponent(
            title
        )}&url=${encodeURIComponent(input_url)}`;
    } else if (appid == applist.koo.id) {
        if (title != "") title += "\n";
        output_url = `https://www.kooapp.com/create?title=${encodeURIComponent(
            `${title}${input_url}`
        )}`;
    } else if (appid == applist.pntrst.id) {
        output_url = `https://www.pinterest.com/pin/create/button/?description=${encodeURIComponent(
            title
        )}&url=${encodeURIComponent(input_url)}&method=button`;
        //&media=${"https://raw.githubusercontent.com/patelka2211/gdocs/main/assets/opengraph.jpg"}
    } else if (appid == applist.tg.id) {
        output_url = `https://t.me/share/url?url=${encodeURIComponent(
            input_url
        )}&text=${encodeURIComponent(title)}&to=`;
    }

    return output_url;
}

function open_URL_window(url, width_percent = 0.84, height_percent = 0.84) {
    if (sessionStorage.hasOwnProperty("window_features")) {
        window.open(url, "_blank", sessionStorage.window_features);
        return;
    }

    let window_features = `resizable=yes,width=${
        screen.width * width_percent
    },height=${screen.height * height_percent},top=${
        (screen.height * (1 - height_percent)) / 2
    },left=${(screen.width * (1 - width_percent)) / 2}`;
    window.open(url, "_blank", window_features);

    sessionStorage.window_features = window_features;
}

function close_sharer() {
    sessionStorage.removeItem("temp-sharer-url");

    let sharer_by_KP = document.getElementById("sharer-by-KP");

    setTimeout(() => {
        sharer_by_KP.style.transition = "top 1s ease, opacity 0.2s ease";
        sharer_by_KP.classList.remove("show");

        setTimeout(() => {
            sharer_by_KP.style.transition = "top 0.2s ease, opacity 1s ease";
            sharer_by_KP.remove();
            document.body.style.overflow = "auto";
        }, 200);
    }, 200);
}

function get_sharer_footer() {
    let sharer_footer = new json2html();

    sharer_footer.add(
        sharer_footer.div(
            { class: "sharer-footer" },
            sharer_footer.div({ class: "sharer-footer-container" }, [
                sharer_footer.div(
                    { id: "feedback-btn", class: "footer-btns" },
                    sharer_footer.div(
                        { class: "footer-btn-container" },
                        "Feedback"
                    )
                ),
                sharer_footer.div({ class: "separator" }),
                sharer_footer.div(
                    { id: "developer-btn", class: "footer-btns" },
                    sharer_footer.div(
                        { class: "footer-btn-container" },
                        "Developer"
                    )
                ),
            ])
        )
    );

    return sharer_footer.list;
}

/** https://github.com/datalog/qrcode-svg under MIT license */

function QRCode(r) {
    var n,
        t,
        o,
        e,
        a = [],
        f = [],
        i = Math.max,
        u = Math.min,
        h = Math.abs,
        v = Math.ceil,
        c = /^[0-9]*$/,
        s = /^[A-Z0-9 $%*+.\/:-]*$/,
        l = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:",
        g = [
            [
                -1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22,
                24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30,
                30, 30, 30, 30, 30, 30, 30, 30, 30,
            ],
            [
                -1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24,
                28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
                28, 28, 28, 28, 28, 28, 28, 28, 28,
            ],
            [
                -1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30,
                24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30,
                30, 30, 30, 30, 30, 30, 30, 30, 30,
            ],
            [
                -1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24,
                30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30,
                30, 30, 30, 30, 30, 30, 30, 30, 30,
            ],
        ],
        d = [
            [
                -1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8,
                8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21,
                22, 24, 25,
            ],
            [
                -1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13,
                14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37,
                38, 40, 43, 45, 47, 49,
            ],
            [
                -1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18,
                21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51,
                53, 56, 59, 62, 65, 68,
            ],
            [
                -1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19,
                21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57,
                60, 63, 66, 70, 74, 77, 81,
            ],
        ],
        m = { L: [0, 1], M: [1, 0], Q: [2, 3], H: [3, 2] },
        p = function (r, n) {
            for (var t = 0, o = 8; o--; )
                t = (t << 1) ^ (285 * (t >>> 7)) ^ (((n >>> o) & 1) * r);
            return t;
        },
        C = function (r, n) {
            for (var t = [], o = r.length, e = o; e; )
                for (var a = r[o - e--] ^ t.shift(), f = n.length; f--; )
                    t[f] ^= p(n[f], a);
            return t;
        },
        w = function (r) {
            for (
                var n = [
                        function () {
                            return 0 == (t + o) % 2;
                        },
                        function () {
                            return 0 == t % 2;
                        },
                        function () {
                            return 0 == o % 3;
                        },
                        function () {
                            return 0 == (t + o) % 3;
                        },
                        function () {
                            return 0 == (((t / 2) | 0) + ((o / 3) | 0)) % 2;
                        },
                        function () {
                            return 0 == ((t * o) % 2) + ((t * o) % 3);
                        },
                        function () {
                            return 0 == (((t * o) % 2) + ((t * o) % 3)) % 2;
                        },
                        function () {
                            return 0 == (((t + o) % 2) + ((t * o) % 3)) % 2;
                        },
                    ][r],
                    t = e;
                t--;

            )
                for (var o = e; o--; ) f[t][o] || (a[t][o] ^= n());
        },
        b = function () {
            for (
                var r = function (r, n) {
                        n[6] || (r += e), n.shift(), n.push(r);
                    },
                    n = function (n, o, a) {
                        return n && (r(o, a), (o = 0)), r((o += e), a), t(a);
                    },
                    t = function (r) {
                        var n = r[5],
                            t =
                                n > 0 &&
                                r[4] == n &&
                                r[3] == 3 * n &&
                                r[2] == n &&
                                r[1] == n;
                        return (
                            (t && r[6] >= 4 * n && r[0] >= n ? 1 : 0) +
                            (t && r[0] >= 4 * n && r[6] >= n ? 1 : 0)
                        );
                    },
                    o = 0,
                    f = e * e,
                    i = 0,
                    u = e;
                u--;

            ) {
                for (
                    var c = [0, 0, 0, 0, 0, 0, 0],
                        s = [0, 0, 0, 0, 0, 0, 0],
                        l = !1,
                        g = !1,
                        d = 0,
                        m = 0,
                        p = e;
                    p--;

                ) {
                    a[u][p] == l
                        ? 5 == ++d
                            ? (o += 3)
                            : d > 5 && o++
                        : (r(d, c), (o += 40 * t(c)), (d = 1), (l = a[u][p])),
                        a[p][u] == g
                            ? 5 == ++m
                                ? (o += 3)
                                : m > 5 && o++
                            : (r(m, s),
                              (o += 40 * t(s)),
                              (m = 1),
                              (g = a[p][u]));
                    var C = a[u][p];
                    C && i++,
                        p &&
                            u &&
                            C == a[u][p - 1] &&
                            C == a[u - 1][p] &&
                            C == a[u - 1][p - 1] &&
                            (o += 3);
                }
                o += 40 * n(l, d, c) + 40 * n(g, m, s);
            }
            return (o += 10 * (v(h(20 * i - 10 * f) / f) - 1));
        },
        A = function (r, n, t) {
            for (; n--; ) t.push((r >>> n) & 1);
        },
        M = function (r, n) {
            return r.numBitsCharCount[((n + 7) / 17) | 0];
        },
        B = function (r, n) {
            return 0 != ((r >>> n) & 1);
        },
        x = function (r, n) {
            for (var t = 0, o = r.length; o--; ) {
                var e = r[o],
                    a = M(e, n);
                if (1 << a <= e.numChars) return 1 / 0;
                t += 4 + a + e.bitData.length;
            }
            return t;
        },
        D = function (r) {
            if (r < 1 || r > 40) throw "Version number out of range";
            var n = (16 * r + 128) * r + 64;
            if (r >= 2) {
                var t = (r / 7) | 2;
                (n -= (25 * t - 10) * t - 55), r >= 7 && (n -= 36);
            }
            return n;
        },
        I = function (r, n) {
            for (var t = 2; -2 <= t; t--)
                for (var o = 2; -2 <= o; o--)
                    E(r + o, n + t, 1 != i(h(o), h(t)));
        },
        H = function (r, n) {
            for (var t = 4; -4 <= t; t--)
                for (var o = 4; -4 <= o; o--) {
                    var a = i(h(o), h(t)),
                        f = r + o,
                        u = n + t;
                    0 <= f &&
                        f < e &&
                        0 <= u &&
                        u < e &&
                        E(f, u, 2 != a && 4 != a);
                }
        },
        $ = function (r) {
            for (var n = (t[1] << 3) | r, o = n, a = 10; a--; )
                o = (o << 1) ^ (1335 * (o >>> 9));
            var f = 21522 ^ ((n << 10) | o);
            if (f >>> 15 != 0) throw "Assertion error";
            for (a = 0; a <= 5; a++) E(8, a, B(f, a));
            E(8, 7, B(f, 6)), E(8, 8, B(f, 7)), E(7, 8, B(f, 8));
            for (a = 9; a < 15; a++) E(14 - a, 8, B(f, a));
            for (a = 0; a < 8; a++) E(e - 1 - a, 8, B(f, a));
            for (a = 8; a < 15; a++) E(8, e - 15 + a, B(f, a));
            E(8, e - 8, 1);
        },
        O = function () {
            for (var r = e; r--; ) E(6, r, 0 == r % 2), E(r, 6, 0 == r % 2);
            for (
                var t = (function () {
                        var r = [];
                        if (n > 1)
                            for (
                                var t = 2 + ((n / 7) | 0),
                                    o =
                                        32 == n
                                            ? 26
                                            : 2 * v((e - 13) / (2 * t - 2));
                                t--;

                            )
                                r[t] = t * o + 6;
                        return r;
                    })(),
                    o = (r = t.length);
                o--;

            )
                for (var a = r; a--; )
                    (0 == a && 0 == o) ||
                        (0 == a && o == r - 1) ||
                        (a == r - 1 && 0 == o) ||
                        I(t[a], t[o]);
            H(3, 3),
                H(e - 4, 3),
                H(3, e - 4),
                $(0),
                (function () {
                    if (!(7 > n)) {
                        for (var r = n, t = 12; t--; )
                            r = (r << 1) ^ (7973 * (r >>> 11));
                        var o = (n << 12) | r;
                        if (((t = 18), o >>> 18 != 0)) throw "Assertion error";
                        for (; t--; ) {
                            var a = e - 11 + (t % 3),
                                f = (t / 3) | 0,
                                i = B(o, t);
                            E(a, f, i), E(f, a, i);
                        }
                    }
                })();
        },
        Q = function (r) {
            if (r.length != V(n, t)) throw "Invalid argument";
            for (
                var o = d[t[0]][n],
                    e = g[t[0]][n],
                    a = (D(n) / 8) | 0,
                    f = o - (a % o),
                    i = (a / o) | 0,
                    u = [],
                    h = (function (r) {
                        var n = 1,
                            t = [];
                        t[r - 1] = 1;
                        for (var o = 0; o < r; o++) {
                            for (var e = 0; e < r; e++)
                                t[e] = p(t[e], n) ^ t[e + 1];
                            n = p(n, 2);
                        }
                        return t;
                    })(e),
                    v = 0,
                    c = 0;
                v < o;
                v++
            ) {
                var s = r.slice(c, c + i - e + (v < f ? 0 : 1));
                c += s.length;
                var l = C(s, h);
                v < f && s.push(0), u.push(s.concat(l));
            }
            var m = [];
            for (v = 0; v < u[0].length; v++)
                for (var w = 0; w < u.length; w++)
                    (v != i - e || w >= f) && m.push(u[w][v]);
            return m;
        },
        S = function (r) {
            for (var n = [], t = ((r = encodeURI(r)), 0); t < r.length; t++)
                "%" != r.charAt(t)
                    ? n.push(r.charCodeAt(t))
                    : (n.push(parseInt(r.substr(t + 1, 2), 16)), (t += 2));
            return n;
        },
        V = function (r, n) {
            return ((D(r) / 8) | 0) - g[n[0]][r] * d[n[0]][r];
        },
        E = function (r, n, t) {
            (a[n][r] = t ? 1 : 0), (f[n][r] = 1);
        },
        R = function (r) {
            for (var n = [], t = 0, o = r; t < o.length; t++) {
                var e = o[t];
                A(e, 8, n);
            }
            return {
                modeBits: 4,
                numBitsCharCount: [8, 16, 16],
                numChars: r.length,
                bitData: n,
            };
        },
        Z = function (r) {
            if (!c.test(r)) throw "String contains non-numeric characters";
            for (var n = [], t = 0; t < r.length; ) {
                var o = u(r.length - t, 3);
                A(parseInt(r.substr(t, o), 10), 3 * o + 1, n), (t += o);
            }
            return {
                modeBits: 1,
                numBitsCharCount: [10, 12, 14],
                numChars: r.length,
                bitData: n,
            };
        },
        z = function (r) {
            if (!s.test(r))
                throw "String contains unencodable characters in alphanumeric mode";
            var n,
                t = [];
            for (n = 0; n + 2 <= r.length; n += 2) {
                var o = 45 * l.indexOf(r.charAt(n));
                (o += l.indexOf(r.charAt(n + 1))), A(o, 11, t);
            }
            return (
                n < r.length && A(l.indexOf(r.charAt(n)), 6, t),
                {
                    modeBits: 2,
                    numBitsCharCount: [9, 11, 13],
                    numChars: r.length,
                    bitData: t,
                }
            );
        },
        L = function (r, n, t, o) {
            var e = (function (r) {
                return "" == r
                    ? []
                    : c.test(r)
                    ? [Z(r)]
                    : s.test(r)
                    ? [z(r)]
                    : [R(S(r))];
            })(r);
            return U(e, n, t, o);
        },
        N = function (r, i, u, h) {
            (t = i), (o = h);
            for (var v = (e = 4 * (n = r) + 17); v--; )
                (a[v] = []), (f[v] = []);
            if (
                (O(),
                (function (r) {
                    for (var n = 0, t = 1, o = e - 1, i = o; i > 0; i -= 2) {
                        6 == i && --i;
                        for (var u = 0 > (t = -t) ? o : 0, h = 0; h < e; ++h) {
                            for (var v = i; v > i - 2; --v)
                                f[u][v] ||
                                    ((a[u][v] = B(r[n >>> 3], 7 - (7 & n))),
                                    ++n);
                            u += t;
                        }
                    }
                })(Q(u)),
                0 > o)
            ) {
                var c = 1e9;
                for (v = 8; v--; ) {
                    w(v), $(v);
                    var s = b();
                    c > s && ((c = s), (o = v)), w(v);
                }
            }
            w(o), $(o), (f = []);
        },
        U = function (r, n, t, o, e, a) {
            if (
                (void 0 === e && (e = 1),
                void 0 === a && (a = 40),
                void 0 === o && (o = -1),
                void 0 === t && (t = !0),
                !(1 <= e && e <= a && a <= 40) || o < -1 || o > 7)
            )
                throw "Invalid value";
            for (var f = [], i = 236, h = [], v = e; ; ) {
                var c = x(r, v);
                if (c <= 8 * V(v, n)) break;
                if (v >= a) throw "Data too long";
                v++;
            }
            if (t)
                for (var s = (l = [m.H, m.Q, m.M]).length; s--; )
                    c <= 8 * V(v, l[s]) && (n = l[s]);
            for (var l = 0; l < r.length; l++) {
                var g = r[l];
                A(g.modeBits, 4, f), A(g.numChars, M(g, v), f);
                for (var d = 0, p = g.bitData; d < p.length; d++) f.push(p[d]);
            }
            if (f.length != c) throw "Assertion error";
            var C = 8 * V(v, n);
            if (f.length > C) throw "Assertion error";
            if (
                (A(0, u(4, C - f.length), f),
                A(0, (8 - (f.length % 8)) % 8, f),
                f.length % 8 != 0)
            )
                throw "Assertion error";
            for (; f.length < C; ) A(i, 8, f), (i ^= 253);
            for (s = f.length; s--; ) h[s >>> 3] |= f[s] << (7 - (7 & s));
            return N(v, n, h, o);
        };
    return (function () {
        function n(r) {
            return /^#[0-9a-f]{3}(?:[0-9a-f]{3})?$/i.test(r);
        }
        function t(r, n) {
            for (var t in ((r = document.createElementNS(s, r)), n || {}))
                r.setAttribute(t, n[t]);
            return r;
        }
        var o,
            f,
            i,
            u,
            v,
            c,
            s = "http://www.w3.org/2000/svg",
            l = "",
            g = "string" == typeof r ? { msg: r } : r || {},
            d = g.pal || ["#000"],
            p = h(g.dim) || 256,
            C = [1, 0, 0, 1, (c = (c = h(g.pad)) > -1 ? c : 4), c],
            w = n((w = d[0])) ? w : "#000",
            b = n((b = d[1])) ? b : 0,
            A = g.vrb ? 0 : 1;
        for (
            L(g.msg || "", m[g.ecl] || m.M, 0 == g.ecb ? 0 : 1, g.mtx),
                v = e + 2 * c,
                i = e;
            i--;

        )
            for (u = 0, f = e; f--; )
                a[i][f] &&
                    (A
                        ? (u++,
                          a[i][f - 1] ||
                              ((l +=
                                  "M" +
                                  f +
                                  "," +
                                  i +
                                  "h" +
                                  u +
                                  "v1h-" +
                                  u +
                                  "v-1z"),
                              (u = 0)))
                        : (l += "M" + f + "," + i + "h1v1h-1v-1z"));
        return (
            (o = t("svg", {
                viewBox: [0, 0, v, v].join(" "),
                width: p,
                height: p,
                fill: w,
                "shape-rendering": "crispEdges",
                xmlns: s,
                version: "1.1",
            })),
            b &&
                o.appendChild(
                    t("path", { fill: b, d: "M0,0V" + v + "H" + v + "V0H0Z" })
                ),
            o.appendChild(t("path", { transform: "matrix(" + C + ")", d: l })),
            o
        );
    })();
}

function open_feedback() {
    let app_html = new json2html();

    app_html
        .add(get_sharer_header(backButton))
        .add(get_sharer_content("Feedback coming soon"));

    document.getElementById("sharer-window").innerHTML = app_html.get_html();

    setTimeout(() => {
        document.getElementById("back-btn").onclick = () => {
            set_homepage();
        };
    }, 100);
}

function open_developer() {
    let app_html = new json2html();

    app_html
        .add(get_sharer_header(backButton))
        .add(get_sharer_content("Developer content coming soon"));

    document.getElementById("sharer-window").innerHTML = app_html.get_html();

    setTimeout(() => {
        document.getElementById("back-btn").onclick = () => {
            set_homepage();
        };
    }, 100);
}

function set_homepage() {
    let homepage_html = new json2html();

    homepage_html
        .add(get_sharer_header(closeButton))
        .add(get_sharer_content(get_applist_html()))
        .add(get_sharer_footer());

    document.getElementById("sharer-window").innerHTML =
        homepage_html.get_html();
    setTimeout(() => {
        document.getElementById("back-btn").onclick = () => close_sharer();

        Object.keys(applist).forEach((element) => {
            document.getElementById(`open-${element}-btn`).onclick = () => {
                openApp(element);
            };
        });

        document.getElementById("feedback-btn").onclick = open_feedback;
        document.getElementById("developer-btn").onclick = open_developer;
    }, 200);
}

function openApp(appid) {
    let app_html = new json2html();

    app_html.add(get_sharer_header(backButton)).add(
        get_sharer_content(
            app_html.div({ class: "share-on-app-container" }, [
                app_html.div({ id: "icon-n-qr" }, [
                    app_html.div({ id: "app-icon" }, applist[appid].svg),
                    app_html.img("", `${applist[appid].name} QR`, {
                        id: "sharer-qr",
                    }),
                    app_html.img(
                        "https://raw.githubusercontent.com/patelka2211/sharer/main" +
                            "/assets/touch-icon.gif",
                        `Touch here`,
                        {
                            id: "touch-gif",
                        }
                    ),
                ]),
                app_html.div(
                    { class: "title" },
                    `Share on ${applist[appid].name}`
                ),
                app_html.div(
                    { class: "description" },
                    applist[appid].description
                ),
                app_html.div({ class: "sharing-options" }, [
                    app_html.div(
                        {
                            class: "share-btns",
                            id: `share-to-platform`,
                            style: `color: ${applist[appid].theme.fg}; background-color: ${applist[appid].theme.bg};`,
                        },
                        app_html.div(
                            { class: "share-btn" },
                            `Open ${applist[appid].name}`
                        )
                    ),
                    app_html.div({ class: "separator" }),
                    app_html.div(
                        {
                            class: "share-btns",
                            id: "show-qr",
                            style: `color: ${applist[appid].theme.fg}; background-color: ${applist[appid].theme.bg};`,
                        },
                        "Show QR"
                    ),
                ]),
                app_html.div({ id: "qr-container" }),
            ])
        )
    );

    document.getElementById("sharer-window").innerHTML = app_html.get_html();

    setTimeout(() => {
        document.getElementById("back-btn").onclick = () => {
            set_homepage();
        };

        var svgNode = QRCode({
            msg: get_sharing_URL(appid),
            // dim: 300,
            // pad: 40,
            // mtx: 7,
            // ecl: "H",
            // ecb: 0,
            pal: [applist[appid].theme.fg, applist[appid].theme.bg],
            // vrb: 1,
        });

        setTimeout(() => {
            let s = new XMLSerializer();

            let sharer_qr = document.getElementById("sharer-qr");

            sharer_qr.setAttribute(
                "src",
                `data:image/svg+xml;base64,${btoa(
                    s.serializeToString(svgNode)
                )}`
            );
            sharer_qr.style.boxShadow = `0 0px 128px 0 ${applist[appid].theme.bg}66`;
        }, 100);

        document.getElementById("share-to-platform").onclick = () => {
            open_URL_window(get_sharing_URL(appid));
            setTimeout(() => {
                close_sharer();
            }, 200);
        };

        let show_qr = document.getElementById("show-qr");
        let icon_n_qr = document.getElementById("icon-n-qr");
        let toggle_qr_elements = [
            "show-qr",
            "sharer-qr",
            "app-icon",
            "touch-gif",
        ];

        toggle_qr_elements.forEach((element_id) => {
            document.getElementById(element_id).onclick = () => {
                if (icon_n_qr.classList.contains("show-qr")) {
                    show_qr.innerText = "Show QR";
                    setTimeout(() => {
                        document.getElementById(
                            "sharer-header"
                        ).style.backgroundColor = "var(--header-footer-bg)";
                    }, 500);
                } else {
                    document.getElementById(
                        "sharer-header"
                    ).style.backgroundColor = "#00000000";
                    show_qr.innerText = "Hide QR";
                }
                icon_n_qr.classList.toggle("show-qr");

                try {
                    document.getElementById("touch-gif").remove();
                } catch (error) {}
            };
        });

        setTimeout(() => {
            try {
                let touch_gif = document.getElementById("touch-gif");
                touch_gif.classList.add("hide");
                setTimeout(() => {
                    touch_gif.remove();
                }, 400);
            } catch (error) {}
        }, 1600);
    }, 100);
}

const resize_ob = new ResizeObserver(function (entries) {
    setTimeout(() => {
        entries[0].target.style.height = `${window.innerHeight}px`;
    }, 200);
});

function open_sharer(url = "https://patelka2211.github.io/sharer", title = "") {
    sessionStorage.setItem("temp-sharer-url", url);
    sessionStorage.setItem("temp-sharer-title", title);

    let sharer_by_KP_innerHTML = new json2html();

    sharer_by_KP_innerHTML.add(
        sharer_by_KP_innerHTML.div({ id: "sharer-window" }, "")
    );

    let sharer_by_KP = document.createElement("div");

    sharer_by_KP.setAttribute("id", "sharer-by-KP");

    sharer_by_KP.innerHTML = sharer_by_KP_innerHTML.get_html();

    document.body.prepend(sharer_by_KP);

    setTimeout(() => {
        set_homepage();
        sharer_by_KP.classList.add("show");
        sharer_by_KP.style.height = `${window.innerHeight}px`;

        // Listen for orientation changes
        window.addEventListener("orientationchange", () => {
            setTimeout(() => {
                sharer_by_KP.style.height = `${window.innerHeight}px`;
            }, 100);
        });

        // start observing for resize
        resize_ob.observe(sharer_by_KP);
    }, 200);

    document.body.style.overflow = "hidden";
}

// document.getElementById("open-sharer").onclick = () => {
//     open_sharer();
// };
